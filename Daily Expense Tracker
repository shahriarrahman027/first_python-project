#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_USERS 100
#define MAX_USERNAME 30
#define MAX_PASSWORD 30
#define MAX_EXPENSES 100
#define TABLE_WIDTH 82

// ===================== STRUCTS =====================
// Member 2: Expense struct to store expense details
typedef struct {
    int id;
    char date[11];     // YYYY-MM-DD
    int day, month, year;
    char category[20];
    float amount;
    char description[100];
} Expense;

Expense expenses[MAX_EXPENSES];
int expenseCount = 0;

char currentUser[MAX_USERNAME];  // logged-in user

// ===================== CENTER PRINT HELPER =====================
// Member 5: Helper to center text on console
void printCentered(const char *text) {
    int width = 60;
    int len = strlen(text);
    int spaces = (width - len) / 2;
    for (int i = 0; i < spaces; i++) printf(" ");
    printf("%s\n", text);
}

// ===================== TABLE HELPERS =====================
// Member 5: Helpers to print formatted table for summaries
void printTableHeader() {
    for (int i = 0; i < TABLE_WIDTH; i++) printf("=");
    printf("\n");
    printf("| %-5s | %-12s | %-15s | %-10s | %-30s |\n",
           "ID", "Date", "Category", "Amount", "Description");
    for (int i = 0; i < TABLE_WIDTH; i++) printf("=");
    printf("\n");
}

void printTableFooter() {
    for (int i = 0; i < TABLE_WIDTH; i++) printf("-");
    printf("\n");
}

void printExpense(const Expense *e) {
    char desc[31];
    strncpy(desc, e->description, 30);
    desc[30] = '\0';
    printf("| %-5d | %-12s | %-15s | %-10.2f | %-30s |\n",
           e->id, e->date, e->category, e->amount, desc);
}

// ===================== AUTH FUNCTIONS =====================
// Member 1: SignUp / SignIn functionality
int signUp() {
    char username[MAX_USERNAME], password[MAX_PASSWORD];
    FILE *fp = fopen("users.txt", "a+");
    if (!fp) { printf("Error opening users file!\n"); return 0; }

    printf("\n--- Sign Up ---\n");
    printf("Enter new username: ");
    scanf("%s", username);
    printf("Enter new password: ");
    scanf("%s", password);

    // check if username already exists
    char u[MAX_USERNAME], p[MAX_PASSWORD];
    rewind(fp);
    while (fscanf(fp, "%s %s", u, p) == 2) {
        if (strcmp(u, username) == 0) {
            printf("Username already exists! Try again.\n");
            fclose(fp);
            return 0;
        }
    }

    fprintf(fp, "%s %s\n", username, password);
    fclose(fp);
    printf("User registered successfully!\n");
    return 1;
}

int signIn() {
    char username[MAX_USERNAME], password[MAX_PASSWORD];
    FILE *fp = fopen("users.txt", "r");
    if (!fp) { printf("No users registered yet! Please sign up first.\n"); return 0; }

    printf("\n--- Sign In ---\n");
    printf("Enter username: ");
    scanf("%s", username);
    printf("Enter password: ");
    scanf("%s", password);

    char u[MAX_USERNAME], p[MAX_PASSWORD];
    while (fscanf(fp, "%s %s", u, p) == 2) {
        if (strcmp(u, username) == 0 && strcmp(p, password) == 0) {
            strcpy(currentUser, username);
            fclose(fp);
            printf("\n====================================================================\n");
            printf(" Welcome %s to MoneyMap â€“ Maps out your daily financial flow!\n", currentUser);
            printf("====================================================================\n");
            return 1;
        }
    }

    fclose(fp);
    printf("Invalid username or password!\n");
    return 0;
}

// ===================== USER FILE HELPER =====================
// Member 1: Each user gets a separate expense file
void getExpenseFileName(char filename[]) {
    sprintf(filename, "%s_expenses.txt", currentUser);
}

// ===================== FILE HANDLING =====================
// Member 5: Load and save expenses to file
void loadExpenses() {
    char filename[50];
    getExpenseFileName(filename);

    FILE *fp = fopen(filename, "r");
    if (!fp) return;

    expenseCount = 0;
    while (fscanf(fp, "%d %s %d %d %d %s %f %[^\n]",
                  &expenses[expenseCount].id,
                  expenses[expenseCount].date,
                  &expenses[expenseCount].year,
                  &expenses[expenseCount].month,
                  &expenses[expenseCount].day,
                  expenses[expenseCount].category,
                  &expenses[expenseCount].amount,
                  expenses[expenseCount].description) == 8) {
        expenseCount++;
    }

    fclose(fp);
}

void saveExpenses() {
    char filename[50];
    getExpenseFileName(filename);

    FILE *fp = fopen(filename, "w");
    if (!fp) { printf("Error saving expenses!\n"); return; }

    for (int i = 0; i < expenseCount; i++) {
        fprintf(fp, "%d %s %d %d %d %s %.2f %s\n",
                expenses[i].id,
                expenses[i].date,
                expenses[i].year,
                expenses[i].month,
                expenses[i].day,
                expenses[i].category,
                expenses[i].amount,
                expenses[i].description);
    }

    fclose(fp);
}

// ===================== FEATURES =====================
// Member 2: Add new expense
void addExpense() {
    char choice;
    do {
        if (expenseCount >= MAX_EXPENSES) {
            printf("\nExpense list is full! Cannot add more.\n");
            return;
        }

        Expense e;
        e.id = expenseCount + 1;

        printf("\n--- Add New Expense ---\n");
        printf("Enter date (YYYY-MM-DD): ");
        scanf("%10s", e.date);
        sscanf(e.date, "%d-%d-%d", &e.year, &e.month, &e.day);

        printf("Enter category: ");
        scanf("%19s", e.category);

        printf("Enter amount: ");
        scanf("%f", &e.amount);

        printf("Enter description: ");
        scanf(" %[^\n]", e.description);

        expenses[expenseCount++] = e;
        saveExpenses();

        printf("Expense added successfully with ID %d!\n", e.id);
        printf("\nAdd another expense? (y/n): ");
        scanf(" %c", &choice);

    } while (choice == 'y' || choice == 'Y');
}

// Member 3: Edit an existing expense
void editExpense() {
    int editId, found = 0;
    printf("\nEnter Expense ID to edit: ");
    scanf("%d", &editId);

    for (int i = 0; i < expenseCount; i++) {
        if (expenses[i].id == editId) {
            printf("\nEditing Expense ID %d\n", expenses[i].id);
            printf("Enter new date (YYYY-MM-DD): ");
            scanf("%10s", expenses[i].date);
            sscanf(expenses[i].date, "%d-%d-%d", &expenses[i].year, &expenses[i].month, &expenses[i].day);

            printf("Enter new category: ");
            scanf("%19s", expenses[i].category);

            printf("Enter new amount: ");
            scanf("%f", &expenses[i].amount);

            printf("Enter new description: ");
            scanf(" %[^\n]", expenses[i].description);

            saveExpenses();
            printf("Expense updated successfully!\n");
            found = 1;
            break;
        }
    }
    if (!found) printf("Expense with ID %d not found.\n", editId);
}

// Member 4: Daily summary
void dailySummary() {
    char date[11]; float total = 0;
    printf("\nEnter date (YYYY-MM-DD): ");
    scanf("%10s", date);

    printf("\n--- Daily Summary for %s ---\n", date);
    printTableHeader();

    for (int i = 0; i < expenseCount; i++) {
        if (strcmp(expenses[i].date, date) == 0) {
            printExpense(&expenses[i]);
            total += expenses[i].amount;
        }
    }
    printTableFooter();
    printf("TOTAL SPENT: %.2f\n", total);
}

// Member 4: Monthly summary
void monthlySummary() {
    int month, year; float total = 0;
    printf("\nEnter month and year (MM YYYY): ");
    scanf("%d %d", &month, &year);

    printf("\n--- Monthly Summary for %02d-%d ---\n", month, year);
    printTableHeader();

    for (int i = 0; i < expenseCount; i++) {
        if (expenses[i].month == month && expenses[i].year == year) {
            printExpense(&expenses[i]);
            total += expenses[i].amount;
        }
    }
    printTableFooter();
    printf("TOTAL SPENT: %.2f\n", total);
}

// Member 3: Search expenses by category
void searchByCategory() {
    char category[20]; float total = 0;
    printf("\nEnter category: ");
    scanf("%19s", category);

    printf("\n--- Expenses in category: %s ---\n", category);
    printTableHeader();

    for (int i = 0; i < expenseCount; i++) {
        if (strcmp(expenses[i].category, category) == 0) {
            printExpense(&expenses[i]);
            total += expenses[i].amount;
        }
    }
    printTableFooter();
    printf("TOTAL SPENT in %s: %.2f\n", category, total);
}

// Member 3: Search expenses by amount range
void searchByAmountRange() {
    float min, max, total = 0;
    printf("\nEnter min and max: ");
    scanf("%f %f", &min, &max);

    printf("\n--- Expenses between %.2f and %.2f ---\n", min, max);
    printTableHeader();

    for (int i = 0; i < expenseCount; i++) {
        if (expenses[i].amount >= min && expenses[i].amount <= max) {
            printExpense(&expenses[i]);
            total += expenses[i].amount;
        }
    }
    printTableFooter();
    printf("TOTAL: %.2f\n", total);
}

// Member 3: Search expenses by date range
void searchByDateRange() {
    int sy, sm, sd, ey, em, ed; float total = 0;
    printf("\nEnter start date (YYYY MM DD): ");
    scanf("%d %d %d", &sy, &sm, &sd);
    printf("Enter end date (YYYY MM DD): ");
    scanf("%d %d %d", &ey, &em, &ed);

    printf("\n--- Expenses from %04d-%02d-%02d to %04d-%02d-%02d ---\n",
           sy, sm, sd, ey, em, ed);
    printTableHeader();

    for (int i = 0; i < expenseCount; i++) {
        int y = expenses[i].year, m = expenses[i].month, d = expenses[i].day;
        if ((y > sy || (y == sy && (m > sm || (m == sm && d >= sd)))) &&
            (y < ey || (y == ey && (m < em || (m == em && d <= ed))))) {
            printExpense(&expenses[i]);
            total += expenses[i].amount;
        }
    }
    printTableFooter();
    printf("TOTAL SPENT in range: %.2f\n", total);
}

// ===================== MENUS =====================
// Member 1: Expense menu after login
void expenseMenu() {
    int choice;
    do {
        printf("\n\t\t\t\t\t--- Expense Menu ---\n");
        printCentered("1. Add Expense");
        printCentered("2. Edit Expense");
        printCentered("3. Daily Summary");
        printCentered("4. Monthly Summary");
        printCentered("5. Search by Category");
        printCentered("6. Search by Amount Range");
        printCentered("7. Search by Date Range");
        printCentered("0. Logout");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1: addExpense(); break;
            case 2: editExpense(); break;
            case 3: dailySummary(); break;
            case 4: monthlySummary(); break;
            case 5: searchByCategory(); break;
            case 6: searchByAmountRange(); break;
            case 7: searchByDateRange(); break;
            case 0: printf("Logging out...\n"); break;
            default: printf("Invalid choice!\n");
        }
    } while(choice != 0);
}

// Member 1: Main menu
int main() {
    printCentered("   ===========================================================");
    printCentered("    Welcome to MoneyMap â€“ Maps out your daily financial flow.");
    printCentered("   ===========================================================");

    int choice;
    while(1) {
        printf("\n\t\t\t\t\t--- Main Menu ---\n");
        printCentered("1. Sign Up");
        printCentered("2. Sign In");
        printCentered("0. Exit");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1: signUp(); break;
            case 2:
                if(signIn()) {
                    loadExpenses();
                    expenseMenu();
                }
                break;
            case 0:
                printf("Goodbye! Thank you for using MoneyMap.\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
